import api from '@/api/axios';
import { apiService } from '@/api/services';
import OrderNotification from '@/components/OrderNotification';
import { CourierData, Order } from '@/types/interfaces';
import { registerForPushNotificationsAsync } from '@/utils/registerForPushNotificationsAsync';
import { saveNotificationTokenData, updateCourierData } from '@/utils/storage';
import * as BackgroundTask from "expo-background-task";
import { useKeepAwake } from 'expo-keep-awake';
import * as Location from 'expo-location';
import * as Notifications from "expo-notifications";
import { Stack, useRouter } from "expo-router";
import * as SplashScreen from "expo-splash-screen";
import { StatusBar } from 'expo-status-bar';
import * as TaskManager from "expo-task-manager";
import React, { useEffect, useRef, useState } from 'react';
import { Alert, SafeAreaView, View } from 'react-native';
import 'react-native-reanimated';
import { SafeAreaProvider } from 'react-native-safe-area-context';

Notifications.setNotificationHandler({
    handleNotification: async (notification) => {
        const title = notification.request.content.title;

        if (title === "getLocation") {
            return {
                shouldShowAlert: false,
                shouldPlaySound: false,
                shouldSetBadge: false,
                shouldShowBanner: false,
                shouldShowList: false,
            };
        }

        return {
            shouldShowAlert: true,
            shouldPlaySound: true,
            shouldSetBadge: true,
            shouldShowBanner: true,
            shouldShowList: true,
        };
    },
});


const BACKGROUND_NOTIFICATION_TASK = "BACKGROUND-NOTIFICATION-TASK";

TaskManager.defineTask(
    BACKGROUND_NOTIFICATION_TASK,
    async ({ data, error, executionInfo }) => {
        console.log("‚úÖ Received a notification in the background!", {
            data,
            error,
            executionInfo,
        });
        // Do something with the notification data
    }
);

Notifications.registerTaskAsync(BACKGROUND_NOTIFICATION_TASK);

// Prevent the splash screen from auto-hiding before asset loading is complete.
SplashScreen.preventAutoHideAsync();

const LOCATION_TASK_NAME = 'background-location-task';
const TASK_NAME = 'background-console-log';
const HEARTBEAT_TASK = 'heartbeat-location-task';

declare global {
  var courierId: string | undefined;
  var lastLocationTime: number;
  var locationWatchId: number | null;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
global.lastLocationTime = 0;
global.locationWatchId = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è)
const sendLocationToServer = async (location: any, source: string) => {
    try {
        const courierId = global.courierId;
        if (!courierId) {
            console.warn(`‚ö†Ô∏è ${source}: –ù–µ—Ç ID –∫—É—Ä—å–µ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏`);
            return false;
        }

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        const timestamp = new Date(location.timestamp);
        timestamp.setHours(timestamp.getHours() + 5);

        const locationData = {
            lat: location.coords.latitude,
            lon: location.coords.longitude,
            timestamp: timestamp,
            accuracy: location.coords.accuracy,
            source: source
        };

        console.log(`üìç ${source}: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:`, locationData);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ API
        await apiService.updateData(courierId, "point", locationData);
        
        // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        const logText = `[${new Date().toISOString()}] ${source}: –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (${locationData.lat}, ${locationData.lon}), —Ç–æ—á–Ω–æ—Å—Ç—å: ${locationData.accuracy}–º`;
        const data = { text: logText };
        await api.post('/courierAggregatorTestLog', data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        global.lastLocationTime = Date.now();
        
        console.log(`‚úÖ ${source}: –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞`);
        return true;
    } catch (error) {
        console.error(`‚ùå ${source}: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:`, error);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ–± –æ—à–∏–±–∫–µ
        try {
            const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            const errorText = `[${new Date().toISOString()}] ${source}: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${errorMessage}`;
            const data = { text: errorText };
            await api.post('/courierAggregatorTestLog', data);
        } catch (logError) {
            console.error(`‚ùå ${source}: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –æ—à–∏–±–∫–∏:`, logError);
        }
        
        return false;
    }
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Å –∫–∞—Å–∫–∞–¥–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
const getLocationWithFallback = async (source: string) => {
    // 1. –ü–†–û–í–ï–†–Ø–ï–ú –°–õ–£–ñ–ë–´ –ì–ï–û–õ–û–ö–ê–¶–ò–ò
    const isLocationEnabled = await Location.hasServicesEnabledAsync();
    if (!isLocationEnabled) {
        console.warn(`‚ö†Ô∏è ${source}: –°–ª—É–∂–±—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ`);
        const data = { text: `[${new Date().toISOString()}] ${source}: –°–ª—É–∂–±—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã` };
        await api.post('/courierAggregatorTestLog', data);
        throw new Error('–°–ª—É–∂–±—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    }

    // 2. –ü–†–û–í–ï–†–Ø–ï–ú –†–ê–ó–†–ï–®–ï–ù–ò–Ø
    const { status } = await Location.getForegroundPermissionsAsync();
    if (status !== 'granted') {
        console.warn(`‚ö†Ô∏è ${source}: –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é`);
        const data = { text: `[${new Date().toISOString()}] ${source}: –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é` };
        await api.post('/courierAggregatorTestLog', data);
        throw new Error('–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é');
    }

    // 3. –ü–†–û–ë–£–ï–ú –ü–û–õ–£–ß–ò–¢–¨ –ü–û–°–õ–ï–î–ù–Æ–Æ –ò–ó–í–ï–°–¢–ù–£–Æ –ü–û–ó–ò–¶–ò–Æ
    let lastKnownLocation = null;
    try {
        lastKnownLocation = await Location.getLastKnownPositionAsync({
            maxAge: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
            requiredAccuracy: 1000, // 1–∫–º —Ç–æ—á–Ω–æ—Å—Ç—å
        });
        
        if (lastKnownLocation) {
            console.log(`üìç ${source}: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é`);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —Å—Ç–∞—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è
            const locationAge = Date.now() - lastKnownLocation.timestamp;
            if (locationAge < 10 * 60 * 1000) { // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –º–æ–ª–æ–∂–µ 10 –º–∏–Ω—É—Ç
                console.log(`‚úÖ ${source}: –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç (–≤–æ–∑—Ä–∞—Å—Ç: ${Math.round(locationAge / 60000)} –º–∏–Ω)`);
                return lastKnownLocation;
            }
        }
    } catch (lastKnownError) {
        console.warn(`‚ö†Ô∏è ${source}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é:`, lastKnownError);
    }

    // 4. –ü–†–û–ë–£–ï–ú –ü–û–õ–£–ß–ò–¢–¨ –¢–ï–ö–£–©–£–Æ –ì–ï–û–õ–û–ö–ê–¶–ò–Æ –° –†–ê–ó–ù–´–ú–ò –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò
    const attempts = [
        {
            name: '–≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å',
            options: { accuracy: Location.Accuracy.High }
        },
        {
            name: '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å',
            options: { accuracy: Location.Accuracy.Balanced }
        },
        {
            name: '–Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å',
            options: { accuracy: Location.Accuracy.Low }
        },
        {
            name: '—Å–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å',
            options: { accuracy: Location.Accuracy.Lowest }
        }
    ];

    for (const attempt of attempts) {
        try {
            console.log(`üîÑ ${source}: –ü—Ä–æ–±—É–µ–º ${attempt.name}...`);
            const location = await Location.getCurrentPositionAsync(attempt.options);
            console.log(`‚úÖ ${source}: –ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ ${attempt.name}`);
            return location;
        } catch (error) {
            console.warn(`‚ö†Ô∏è ${source}: ${attempt.name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:`, error);
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å—Ç–∞—Ä–∞—è –ø–æ–∑–∏—Ü–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            if (attempt === attempts[attempts.length - 1] && lastKnownLocation) {
                console.log(`üìç ${source}: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑–µ—Ä–≤`);
                const locationAge = Date.now() - lastKnownLocation.timestamp;
                console.log(`‚ö†Ô∏è ${source}: –í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ–∑–∏—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –Ω–∞ ${Math.round(locationAge / 60000)} –º–∏–Ω—É—Ç`);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä–æ–π –ø–æ–∑–∏—Ü–∏–∏
                const warningText = `[${new Date().toISOString()}] ${source}: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∞—è –ø–æ–∑–∏—Ü–∏—è (${Math.round(locationAge / 60000)} –º–∏–Ω)`;
                const warningData = { text: warningText };
                await api.post('/courierAggregatorTestLog', warningData);
                
                return lastKnownLocation;
            }
        }
    }

    // 5. –ï–°–õ–ò –í–°–ï –ú–ï–¢–û–î–´ –ù–ï –°–†–ê–ë–û–¢–ê–õ–ò
    const errorText = `[${new Date().toISOString()}] ${source}: –í–°–ï –ú–ï–¢–û–î–´ –ì–ï–û–õ–û–ö–ê–¶–ò–ò –ù–ï–î–û–°–¢–£–ü–ù–´`;
    const errorData = { text: errorText };
    await api.post('/courierAggregatorTestLog', errorData);
    
    throw new Error('–í—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
};


// 2. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –§–û–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê (BackgroundTask)
TaskManager.defineTask(TASK_NAME, async () => {
    try {
        console.log('üîÑ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–î–ê–ß–ê: –ó–∞–ø—É—â–µ–Ω–∞');
        
        const location = await getLocationWithFallback('–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–î–ê–ß–ê');
        await sendLocationToServer(location, '–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–î–ê–ß–ê');
        
        return BackgroundTask.BackgroundTaskResult.Success;
    } catch (error) {
        console.error('‚ùå –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–î–ê–ß–ê: –û—à–∏–±–∫–∞:', error);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        if (error instanceof Error && error.message.includes('location')) {
            console.log('üîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–î–ê–ß–ê: –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...');
            setTimeout(async () => {
                await diagnoseLocationIssues();
            }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É
        }
        
        return BackgroundTask.BackgroundTaskResult.Failed;
    }
});

// 3. HEARTBEAT –ó–ê–î–ê–ß–ê (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
TaskManager.defineTask(HEARTBEAT_TASK, async () => {
    try {
        console.log('üíì HEARTBEAT: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
        
        const now = Date.now();
        const timeSinceLastLocation = now - global.lastLocationTime;
        const fiveMinutes = 5 * 60 * 1000;
        
        // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 7 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if (timeSinceLastLocation > fiveMinutes + 2 * 60 * 1000) {
            console.log('‚ö†Ô∏è HEARTBEAT: –î–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º');
            
            try {
                const location = await getLocationWithFallback('HEARTBEAT');
                await sendLocationToServer(location, 'HEARTBEAT');
            } catch (error) {
                console.error('‚ùå HEARTBEAT: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:', error);
            }
        } else {
            console.log('‚úÖ HEARTBEAT: –°–∏—Å—Ç–µ–º–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        const statusText = `[${new Date().toISOString()}] HEARTBEAT: –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø–æ—Å–ª–µ–¥–Ω—è—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è ${Math.round(timeSinceLastLocation / 1000)} —Å–µ–∫ –Ω–∞–∑–∞–¥`;
        const data = { text: statusText };
        await api.post('/courierAggregatorTestLog', data);
        
        return BackgroundTask.BackgroundTaskResult.Success;
    } catch (error) {
        console.error('‚ùå HEARTBEAT: –û—à–∏–±–∫–∞:', error);
        return BackgroundTask.BackgroundTaskResult.Failed;
    }
});

// 4. –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ù–ï–ü–†–ï–†–´–í–ù–û–ì–û –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø (watchPosition)
const startContinuousLocationTracking = async () => {
    try {
        console.log('üéØ –ù–ï–ü–†–ï–†–´–í–ù–û–ï –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï: –ó–∞–ø—É—Å–∫');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (global.locationWatchId) {
            await Location.stopLocationUpdatesAsync('continuous-tracking');
            global.locationWatchId = null;
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        await Location.startLocationUpdatesAsync('continuous-tracking', {
            accuracy: Location.Accuracy.Balanced,
            timeInterval: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
            distanceInterval: 50, // –ö–∞–∂–¥—ã–µ 50 –º–µ—Ç—Ä–æ–≤
        });
        
        console.log('‚úÖ –ù–ï–ü–†–ï–†–´–í–ù–û–ï –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï: –ó–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        console.error('‚ùå –ù–ï–ü–†–ï–†–´–í–ù–û–ï –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
    }
};

// –ó–∞–¥–∞—á–∞ –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
TaskManager.defineTask('continuous-tracking', async ({ data, error }) => {
    if (error) {
        console.error('‚ùå –ù–ï–ü–†–ï–†–´–í–ù–û–ï –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï: –û—à–∏–±–∫–∞:', error);
        return;
    }
    
    if (data) {
        const { locations } = data as any;
        if (locations && locations.length > 0) {
            const loc = locations[0];
            console.log('üìç –ù–ï–ü–†–ï–†–´–í–ù–û–ï –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï: –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞');
            await sendLocationToServer(loc, '–ù–ï–ü–†–ï–†–´–í–ù–û–ï –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï');
        }
    }
});

// 5. –§–£–ù–ö–¶–ò–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –í–°–ï–• –ú–ï–¢–û–î–û–í
const testAllLocationMethods = async () => {
    try {
        console.log('üß™ –¢–ï–°–¢ –í–°–ï–• –ú–ï–¢–û–î–û–í: –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
        
        const location = await getLocationWithFallback('–¢–ï–°–¢ –í–°–ï–• –ú–ï–¢–û–î–û–í');
        await sendLocationToServer(location, '–¢–ï–°–¢ –í–°–ï–• –ú–ï–¢–û–î–û–í');
        
        console.log('‚úÖ –¢–ï–°–¢ –í–°–ï–• –ú–ï–¢–û–î–û–í: –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
        return true;
    } catch (error) {
        console.error('‚ùå –¢–ï–°–¢ –í–°–ï–• –ú–ï–¢–û–î–û–í: –û—à–∏–±–∫–∞:', error);
        return false;
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
const diagnoseLocationIssues = async () => {
    try {
        console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...');
        
        const diagnostics = {
            servicesEnabled: false,
            foregroundPermission: 'unknown',
            backgroundPermission: 'unknown',
            lastKnownLocation: null as string | null,
            providerStatus: 'unknown',
            timestamp: new Date().toISOString()
        };

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É–∂–±—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        diagnostics.servicesEnabled = await Location.hasServicesEnabledAsync();
        console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–ª—É–∂–±—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã:', diagnostics.servicesEnabled);

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞
        const fgPermissions = await Location.getForegroundPermissionsAsync();
        diagnostics.foregroundPermission = fgPermissions.status;
        console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞:', fgPermissions.status);

        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ñ–æ–Ω–∞
        const bgPermissions = await Location.getBackgroundPermissionsAsync();
        diagnostics.backgroundPermission = bgPermissions.status;
        console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ–æ–Ω–∞:', bgPermissions.status);

        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        try {
            const providerStatus = await Location.getProviderStatusAsync();
            diagnostics.providerStatus = JSON.stringify(providerStatus);
            console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:', providerStatus);
        } catch (providerError) {
            console.warn('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:', providerError);
        }

        // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        try {
            const lastKnown = await Location.getLastKnownPositionAsync();
            if (lastKnown) {
                const age = Date.now() - lastKnown.timestamp;
                diagnostics.lastKnownLocation = `–ï—Å—Ç—å (–≤–æ–∑—Ä–∞—Å—Ç: ${Math.round(age / 60000)} –º–∏–Ω)`;
                console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:', diagnostics.lastKnownLocation);
            } else {
                diagnostics.lastKnownLocation = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
                console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ—Å–ª–µ–¥–Ω—è—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            }
        } catch (lastKnownError) {
            const errorMessage = lastKnownError instanceof Error ? lastKnownError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            diagnostics.lastKnownLocation = `–û—à–∏–±–∫–∞: ${errorMessage}`;
            console.warn('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏:', lastKnownError);
        }

        // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        const diagnosticReport = `[${diagnostics.timestamp}] –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ì–ï–û–õ–û–ö–ê–¶–ò–ò:
- –°–ª—É–∂–±—ã –≤–∫–ª—é—á–µ–Ω—ã: ${diagnostics.servicesEnabled}
- –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞: ${diagnostics.foregroundPermission}
- –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ–æ–Ω–∞: ${diagnostics.backgroundPermission}
- –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è: ${diagnostics.lastKnownLocation}
- –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${diagnostics.providerStatus}`;

        const data = { text: diagnosticReport };
        await api.post('/courierAggregatorTestLog', data);
        
        console.log('‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
        return diagnostics;
        
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        console.error('‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error);
        
        const errorReport = `[${new Date().toISOString()}] –û–®–ò–ë–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò: ${errorMessage}`;
        const errorData = { text: errorReport };
        await api.post('/courierAggregatorTestLog', errorData);
        
        return null;
    }
};

export default function RootLayout() {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞—Ç—É—Ö–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ
    useKeepAwake();

    const router = useRouter()
    const [courier, setCourier] = useState<CourierData | null>(null);
    const [currentOrder, setCurrentOrder] = useState<Order | null>(null);
    const [showNotification, setShowNotification] = useState(false);
    const [isOrderAccepted, setIsOrderAccepted] = useState(false);
    const [isInitialized, setIsInitialized] = useState(false);
    const [locationPermissionGranted, setLocationPermissionGranted] = useState(false);
    const [notificationPermissionGranted, setNotificationPermissionGranted] = useState(false);

    const notificationListener = useRef<Notifications.Subscription | null>(null);
    const responseListener = useRef<Notifications.Subscription | null>(null);

    const [initialRoute, setInitialRoute] = useState<"start" | "main">("start");

    // useEffect(() => {
    //     const init = async () => {
    //       try {
    //         const status = await BackgroundTask.getStatusAsync();
    //         console.log('üì± BackgroundTask —Å—Ç–∞—Ç—É—Å:', status);
            
    //         if (status !== BackgroundTask.BackgroundTaskStatus.Available) {
    //             console.warn('‚ö†Ô∏è –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –°—Ç–∞—Ç—É—Å:', status);
    //             return;
    //         }
      
    //         const isRegistered = await TaskManager.isTaskRegisteredAsync(TASK_NAME);
    //         console.log('üìã –ó–∞–¥–∞—á–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞:', isRegistered);
            
    //         if (!isRegistered) {
    //             await BackgroundTask.registerTaskAsync(TASK_NAME, {
    //               minimumInterval: 5 * 60, // 5 –º–∏–Ω—É—Ç
    //             });
    //             console.log('‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 5 –º–∏–Ω—É—Ç');
    //         } else {
    //             console.log('‚ÑπÔ∏è –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ –±—ã–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞–Ω–µ–µ');
    //         }

    //         // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    //         console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤—Ä—É—á–Ω—É—é...');
    //         try {
    //             // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    //             const { status } = await Location.requestForegroundPermissionsAsync();
    //             if (status === 'granted') {
    //                 const location = await Location.getCurrentPositionAsync({
    //                     accuracy: Location.Accuracy.Balanced,
    //                 });
    //                 console.log('üìç –¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', {
    //                     lat: location.coords.latitude,
    //                     lon: location.coords.longitude,
    //                     accuracy: location.coords.accuracy
    //                 });
                    
    //                 const data = {
    //                     lat: location.coords.latitude,
    //                     lon: location.coords.longitude,
    //                     accuracy: location.coords.accuracy,
    //                     text: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ - –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ ' + new Date().toISOString()
    //                 }
    //                 await api.post('/courierAggregatorTestLog', data);
    //                 console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω - –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');

    //                 // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤—Ä—É—á–Ω—É—é (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    //                 console.log('üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    //                 console.log('‚ö†Ô∏è –í–ê–ñ–ù–û: –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ù–ï —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ!');
    //                 console.log('üì± –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —Å–≤–µ—Ä–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-15 –º–∏–Ω—É—Ç');
                    
    //                 const testResult = await BackgroundTask.triggerTaskWorkerForTestingAsync();
    //                 console.log('üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:', testResult);
                    
    //                 if (testResult === null) {
    //                     console.log('‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    //                     console.log('‚ú® –°–≤–µ—Ä–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á');
    //                 }
    //             } else {
    //                 console.warn('‚ö†Ô∏è –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    //                 const data = {
    //                     text: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ - –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é ' + new Date().toISOString()
    //                 }
    //                 await api.post('/courierAggregatorTestLog', data);
    //             }
    //         } catch (testError) {
    //             console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ:', testError);
    //             const errorMessage = testError instanceof Error ? testError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    //             const data = {
    //                 text: '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ - –æ—à–∏–±–∫–∞ ' + new Date().toISOString() + ' ' + errorMessage
    //             }
    //             await api.post('/courierAggregatorTestLog', data);
    //         }
    //       } catch (error) {
    //         console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:', error);
    //       }
    //     };
    
    //     init();
    //   }, []);

    useEffect(() => {
        SplashScreen.hideAsync();
    }, []);

    const fetchCourierData = async () => {
        try {
            const res = await apiService.getData();
            if (res.success && res.userData) {
                setInitialRoute(res.success ? "main" : "start");
                await updateCourierData(res.userData);
                setCourier(res.userData);
                return res.userData._id;
            }
            return null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–∞:', error);
            Alert.alert('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä–∞');
            return null;
        }
    };

    const requestPermissions = async () => {
        try {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            const { status: locationStatus } = await Location.requestForegroundPermissionsAsync();
            setLocationPermissionGranted(locationStatus === 'granted');
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const { status: notificationStatus } = await Notifications.getPermissionsAsync();
            if (notificationStatus !== 'granted') {
                const { status } = await Notifications.requestPermissionsAsync();
                setNotificationPermissionGranted(status === 'granted');
            } else {
                setNotificationPermissionGranted(true);
            }
            
            return locationStatus === 'granted';
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error);
            return false;
        }
    };

    useEffect(() => {
        const getToken = async () => {
            const token = await registerForPushNotificationsAsync();
            console.log("_layout.tsx token = ", token);

            if (token) {
                await saveNotificationTokenData({ notificationPushToken: token });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å courier._id
                if (courier?._id) {
                    await apiService.updateData(courier._id, "notificationPushToken", token);
                }
            }
        }

        getToken();

        notificationListener.current =
        Notifications.addNotificationReceivedListener( async (notification) => {
            console.log("üîî Notification Received: ", notification);
            console.log("üîî Notification Content: ", notification.request.content);
            console.log("üîî Notification Data: ", notification.request.content.data);
            try {
                let courierId = courier?._id;
                if (!courier?._id) {
                    console.log("üîî No courier ID, fetching data...");
                    const res = await apiService.getData();
                    if (res.success && res.userData) {
                        courierId = res.userData._id;
                        await updateCourierData(res.userData);
                        setCourier(res.userData);
                        console.log("üîî Courier data updated:", res.userData);
                    } else {
                        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—å–µ—Ä–∞');
                        return;
                    }
                }
                
                if (notification.request.content.title === "newOrder") {
                    console.log("üîî New order notification received");
                    const orderData = notification.request.content.data.order as Order;
                    if (orderData) {
                        console.log("üîî Order data:", orderData);
                        setCurrentOrder(orderData);
                        setShowNotification(true);
                        setIsOrderAccepted(false);
                    }
                }
  
                // if (notification.request.content.title === "getLocation" && courierId) {
                //     console.log("üîî Get location notification received");
                    
                //     try {
                //         // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
                //         if (!locationPermissionGranted) {
                //             const granted = await requestPermissions();
                //             if (!granted) return;
                //         }
  
                //         let loc = await Location.getCurrentPositionAsync({
                //             accuracy: Location.Accuracy.Balanced
                //         });
  
                //         const timestamp = new Date(loc.timestamp);
                //         timestamp.setHours(timestamp.getHours() + 5);
  
                //         if (courierId) {
                //             await apiService.updateData(courierId, "point", {
                //                 lat: loc.coords.latitude,
                //                 lon: loc.coords.longitude,
                //                 timestamp: timestamp
                //             });
                //         }
                //     } catch (error) {
                //         console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
                //     }
                // }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            }
        });

        responseListener.current =
        Notifications.addNotificationResponseReceivedListener((response) => {
            console.log(
                "üîî Notification Response: ", response.notification.request.content
            );
            
            const { title, data } = response.notification.request.content;
            
            if (title === "newOrder" && data?.order) {
                const orderData = data.order as Order;
                setCurrentOrder(orderData);
                setShowNotification(true);
                setIsOrderAccepted(false);
            }
        });

        return () => {
            if (notificationListener.current) {
                Notifications.removeNotificationSubscription(
                notificationListener.current
                );
            }
            if (responseListener.current) {
                Notifications.removeNotificationSubscription(responseListener.current);
            }
        };
    }, []);

    const handleAcceptOrder = () => {
        if (currentOrder) {
            setIsOrderAccepted(true);
        }
    };
    
    const handleDeclineOrder = () => {
        setShowNotification(false);
        setCurrentOrder(null);
        setIsOrderAccepted(false);
    };
    
    const handleTimeout = () => {
        setShowNotification(false);
        setCurrentOrder(null);
        setIsOrderAccepted(false);
    };

    const hideNotification = () => {
        setShowNotification(false);
    };

    const getNotificationToken = async () => {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if (!notificationPermissionGranted) {
                const { status } = await Notifications.requestPermissionsAsync();
                console.log("_layout.tsx status = ", status);
                
                if (status !== 'granted') return;
            }
            
            const token = await registerForPushNotificationsAsync();
            console.log("_layout.tsx token = ", token);
            
            if (token) {
                await saveNotificationTokenData({ notificationPushToken: token });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å courier._id
                if (courier?._id) {
                    await apiService.updateData(courier._id, "notificationPushToken", token);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        }
    };

    useEffect(() => {
        fetchCourierData();
    }, []);

    useEffect(() => {
        if (courier?._id) {
            getNotificationToken();
        }
    }, [courier?._id]);

    useEffect(() => {
        console.log("we in 327 line, courier._id = ", courier?._id);
        
        if (!courier?._id) return;
        global.courierId = courier._id;
        
        const startLocationUpdates = async () => {
            const { status } = await Location.requestForegroundPermissionsAsync();
            if (status !== 'granted') return;
            
            // 1. –ó–ê–ü–£–°–ö–ê–ï–ú –û–°–ù–û–í–ù–£–Æ –ó–ê–î–ê–ß–£ –ì–ï–û–õ–û–ö–ê–¶–ò–ò
            const hasStarted = await Location.hasStartedLocationUpdatesAsync(LOCATION_TASK_NAME);
            console.log("we in 335 line, hasStarted = ", hasStarted);
            
            if (!hasStarted) {
                const fg = await Location.requestForegroundPermissionsAsync();
                const bg = await Location.requestBackgroundPermissionsAsync();
                console.log("Permissions: FG =", fg.status, ", BG =", bg.status);
                await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, 
                    {
                        accuracy: Location.Accuracy.Balanced,
                        timeInterval: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
                        distanceInterval: 0,
                        showsBackgroundLocationIndicator: true,
                        foregroundService: {
                            notificationTitle: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è',
                            notificationBody: '–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–æ–≤',
                            notificationColor: '#DC1818',
                        },
                    }
                );
                console.log("‚úÖ –û–°–ù–û–í–ù–ê–Ø –ó–ê–î–ê–ß–ê: Location updates started!");
            }
            
            // 2. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û –ó–ê–ü–£–°–ö–ê–ï–ú –ù–ï–ü–†–ï–†–´–í–ù–û–ï –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï
            console.log("üéØ –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ...");
            await startContinuousLocationTracking();
            
            // 3. –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–¢–ê–¢–£–° –ó–ê–ü–£–°–ö–ê
            try {
                const statusText = `[${new Date().toISOString()}] –ö–£–†–¨–ï–† –ê–ö–¢–ò–í–ï–ù: ID=${courier._id}, –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω—ã`;
                const data = { text: statusText };
                await api.post('/courierAggregatorTestLog', data);
                console.log("‚úÖ –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—É—Ä—å–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä");
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:", error);
            }
        };
        
        startLocationUpdates();
        
        return () => {
            // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏:
            // Location.stopLocationUpdatesAsync(LOCATION_TASK_NAME);
            // Location.stopLocationUpdatesAsync('continuous-tracking');
        };
    }, [courier?._id]);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    useEffect(() => {
        const initBackgroundTask = async () => {
            try {
                console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ö–û–ú–ü–õ–ï–ö–°–ù–û–ô –°–ò–°–¢–ï–ú–´ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
                const { status } = await Location.requestForegroundPermissionsAsync();
                if (status !== 'granted') {
                    console.warn('‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ');
                    return;
                }
                
                // 1. –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –û–°–ù–û–í–ù–£–Æ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–£–Æ –ó–ê–î–ê–ß–£
                console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É...');
                await BackgroundTask.registerTaskAsync(TASK_NAME, {
                    minimumInterval: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
                });
                console.log('‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞');
                
                // 2. –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú HEARTBEAT –ó–ê–î–ê–ß–£
                console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º heartbeat –∑–∞–¥–∞—á—É...');
                await BackgroundTask.registerTaskAsync(HEARTBEAT_TASK, {
                    minimumInterval: 3 * 60 * 1000, // 3 –º–∏–Ω—É—Ç—ã (—á–∞—â–µ —á–µ–º –æ—Å–Ω–æ–≤–Ω–∞—è)
                });
                console.log('‚úÖ Heartbeat –∑–∞–¥–∞—á–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞');
                
                // 3. –ó–ê–ü–£–°–ö–ê–ï–ú –ù–ï–ü–†–ï–†–´–í–ù–û–ï –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï
                console.log('üìù –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ...');
                await startContinuousLocationTracking();
                
                // 4. –¢–ï–°–¢–ò–†–£–ï–ú –í–°–ï –ú–ï–¢–û–î–´ –í –†–ï–ñ–ò–ú–ï –†–ê–ó–†–ê–ë–û–¢–ö–ò
                if (__DEV__) {
                    console.log('üß™ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤...');
                    setTimeout(async () => {
                        const result = await testAllLocationMethods();
                        console.log('üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', result ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞');
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
                        const statusText = `[${new Date().toISOString()}] –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê: –í—Å–µ ${result ? '5' : '4'} –º–µ—Ç–æ–¥–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã`;
                        const data = { text: statusText };
                        await api.post('/courierAggregatorTestLog', data);
                    }, 3000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 3 —Å–µ–∫—É–Ω–¥—ã
                }
                
                console.log('üéØ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
                console.log('üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:');
                console.log('   1Ô∏è‚É£ –û–°–ù–û–í–ù–ê–Ø –ó–ê–î–ê–ß–ê (TaskManager) - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω');
                console.log('   2Ô∏è‚É£ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–î–ê–ß–ê (BackgroundTask) - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω');
                console.log('   3Ô∏è‚É£ HEARTBEAT (–∫–æ–Ω—Ç—Ä–æ–ª—å) - –∫–∞–∂–¥—ã–µ 3 –º–∏–Ω');
                console.log('   4Ô∏è‚É£ –ù–ï–ü–†–ï–†–´–í–ù–û–ï –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï - –ø–æ –¥–≤–∏–∂–µ–Ω–∏—é');
                console.log('   5Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï - –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é');
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥ –æ–± –æ—à–∏–±–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                try {
                    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                    const errorText = `[${new Date().toISOString()}] –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´: ${errorMessage}`;
                    const data = { text: errorText };
                    await api.post('/courierAggregatorTestLog', data);
                } catch (logError) {
                    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', logError);
                }
            }
        };
        
        initBackgroundTask();
    }, []);

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    const triggerTaskWorkerForTestingAsync = async () => {
        try {
            console.log('‚ö†Ô∏è –í–ê–ñ–ù–û: –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ù–ï –†–ê–ë–û–¢–ê–Æ–¢ –∫–æ–≥–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ!');
            console.log('üì± –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: —Å–≤–µ—Ä–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-15 –º–∏–Ω—É—Ç');
            console.log('üß™ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –í–°–ï–• –º–µ—Ç–æ–¥–æ–≤ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
            const result = await testAllLocationMethods();
            console.log('üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤:', result ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞');
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            const now = Date.now();
            const timeSinceLastLocation = now - global.lastLocationTime;
            console.log(`üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: –ø–æ—Å–ª–µ–¥–Ω—è—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è ${Math.round(timeSinceLastLocation / 1000)} —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥`);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:', error);
        }
    };

    return (
        <SafeAreaView style={{flex: 1}}>
            <SafeAreaProvider>
                <Stack screenOptions={{ headerShown: false }} initialRouteName={initialRoute}>
                    <Stack.Screen name="start" />
                    <Stack.Screen name="login" />
                    <Stack.Screen name="register" />
                    <Stack.Screen name="otp" />
                    <Stack.Screen name="registerAccepted" />

                    <Stack.Screen name="main" />
                    <Stack.Screen name="map" />
                    <Stack.Screen name="orderStatus" />
                    <Stack.Screen name="success" />
                    <Stack.Screen name="cancelled" />
                    <Stack.Screen name="cancelledReason" />
                    <Stack.Screen name="changeOrderBottles" />

                    <Stack.Screen name="settings" />
                    <Stack.Screen name="changeData" />
                    <Stack.Screen name="analytics" />
                    
                    <Stack.Screen name="deliveredBottles" />
                    <Stack.Screen name="history" />
                    <Stack.Screen name="orderHistoryData" />
                    <Stack.Screen name="finance" />
                </Stack>
                <StatusBar style="auto" />
                {currentOrder && (
                    <OrderNotification
                        isVisible={showNotification}
                        onAccept={handleAcceptOrder}
                        onDecline={handleDeclineOrder}
                        onTimeout={handleTimeout}
                        hideNotification={hideNotification}
                        isAccepted={isOrderAccepted}
                        order={currentOrder}
                    />
                )}
            </SafeAreaProvider>
            <View style={{height: 30}}></View>
        </SafeAreaView>
    )
}